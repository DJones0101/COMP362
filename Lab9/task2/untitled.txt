/*
* Darius Jones
* Lab 9 Task 2
* 3/29/2018
*/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>


typedef struct node NODE;
struct node {
	int data;
	NODE *next;
	NODE *prev;
};

NODE *HEAD;


int maximum_capacity;
int current_capacity;
int fault_count;


void remove_tail_node(NODE *HEAD);
void append_to_head(int new_data);
void swap_head(NODE *to_swap);
NODE* create_new_node(int new_data);
void print();
void free_nodes(NODE *HEAD);
void simulation();
NODE *search_list(int data);


int main(int argc, char *argv[]) {

	simulation();
	free_nodes(HEAD);
	return 0;
}

void simulation() {

	fscanf(stdin, "%d", &maximum_capacity);

	int current_input;
	NODE *search_result;


	while (true) {

		if (fscanf(stdin, "%d", &current_input) == EOF) {break;}

		printf("---------------REQUEST = %d----------------------\n", current_input);


		search_result = search_list(current_input);

		if (search_result != NULL) { // found, HIT case


			printf(">");

			if (HEAD->data != current_input) {
				swap_head(search_result);
			}


		} else if (search_result == NULL) { // not found, fault

			printf("*");

			if ( current_capacity < maximum_capacity) { // space avaliable

				append_to_head(current_input);

			} else { // no space avaliable

				remove_tail_node(HEAD);
				append_to_head(current_input);

			}
			(if current_capacity < maximum_capacity){
				current_capacity++;
			}
			
			fault_count++;

		}


		printf("---------------HEAD = %d----------------------\n", HEAD->data);

		print();

	}


	printf("Number of faults:  %d\n", fault_count);
}



NODE *search_list(int data) {
	NODE *current = HEAD;

	while (current != NULL) {

		if (current->data == data) {
			return current;
		}

		current = current->next;
	}

	return NULL;
}


NODE* create_new_node(int new_data) {
	NODE *new_node = (NODE*)malloc(sizeof(NODE));
	new_node->data = new_data;
	new_node->prev = NULL;
	new_node->next = NULL;
	return new_node;
}

void append_to_head(int new_data) {
	NODE *new_node = create_new_node(new_data);
	

	if (HEAD == NULL) {
		HEAD = new_node;
		return;
	}

	HEAD->prev = new_node;
	new_node->next = HEAD;
	HEAD = new_node;

}

void remove_tail_node(NODE *HEAD) {

	NODE *current = HEAD;
	NODE *temp;
	

	while (current->next != NULL) {
		current = current->next;
	}

	temp = current->prev;
	temp->prev = NULL;
	//free(current)
	
}

void swap_head(NODE *to_swap) {





}

void print() {

	NODE *current = HEAD;

	while (current != NULL) {
		printf("%d ", current->data);
		current = current->next;
	}
	printf("\n");

}

void free_nodes(NODE *HEAD) {

	NODE *current = HEAD;

	while (current != NULL) {
		NODE *next_node = current->next;
		free(current);
		current = next_node;
	}
}